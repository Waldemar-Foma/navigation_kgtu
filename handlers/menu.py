from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from utils.constants import BUILDINGS
from config import MAIN_MENU, SETTINGS, ASKING_LOCATION
from keyboards import main_menu_keyboard
from handlers.help import show_help


db = Database()

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        from keyboards import settings_keyboard
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=settings_keyboard()
        )
        return SETTINGS
    elif text == "üè¢ –°–º–µ–Ω–∏—Ç—å –∫–æ—Ä–ø—É—Å":
        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}],
                    *[[building] for building in BUILDINGS.keys()],
                    ["üîô –ù–∞–∑–∞–¥"]
                ],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ASKING_LOCATION
    elif text == "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        user_info = db.get_user_info(user.id)
        if user_info and user_info[5]:  # group
            schedule = db.get_schedule(user_info[5])
            if schedule:
                await update.message.reply_text(
                    f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {user_info[5]}:\n\n{schedule}",
                    reply_markup=main_menu_keyboard()
                )
            else:
                await update.message.reply_text(
                    "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=main_menu_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                reply_markup=main_menu_keyboard()
            )
        return MAIN_MENU
    elif text == "üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ—Ä–ø—É—Å—É":
        current_building = db.get_user_building(user.id)
        if current_building:
            await update.message.reply_text(
                f"üè¢ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–ø—É—Å–µ: <b>{current_building}</b>\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
                "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —ç—Ç–∞–∂–∞\n"
                "‚Ä¢ –ù–∞–π—Ç–∏ –¥–µ–∫–∞–Ω–∞—Ç\n\n"
                "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
                parse_mode='HTML',
                reply_markup=main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø—É—Å.",
                reply_markup=main_menu_keyboard()
            )
        return MAIN_MENU
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await show_help(update, context)
        return MAIN_MENU
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
