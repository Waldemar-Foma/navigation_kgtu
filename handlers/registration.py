from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext

from database import Database
from states import Registration
from keyboards import (get_institutes_kb, get_specialities_kb,
                       get_location_method_kb, get_location_request_kb,
                       get_confirm_location_kb, get_buildings_kb, get_main_menu_kb)
from utils import find_nearest_building, format_profile
from constants import INSTITUTES, BUILDINGS

router = Router()


async def start_registration(message: types.Message, state: FSMContext):
    await state.set_state(Registration.full_name)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@router.message(Registration.full_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(Registration.institute)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∏–Ω—Å—Ç–∏—Ç—É—Ç:", reply_markup=get_institutes_kb())


@router.message(Registration.institute)
async def process_institute(message: types.Message, state: FSMContext):
    if message.text not in INSTITUTES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    await state.update_data(institute=message.text)
    await state.set_state(Registration.speciality)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=get_specialities_kb(message.text)
    )


@router.message(Registration.speciality)
async def process_speciality(message: types.Message, state: FSMContext):
    data = await state.get_data()
    institute = data.get('institute')

    if message.text not in INSTITUTES.get(institute, []):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    await state.update_data(speciality=message.text)
    await state.set_state(Registration.location_method)
    await message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
        reply_markup=get_location_method_kb()
    )


@router.message(Registration.location_method)
async def process_location_method(message: types.Message, state: FSMContext):
    if message.text == "üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏":
        await state.set_state(Registration.auto_location)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=get_location_request_kb()
        )
    elif message.text == "üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
        await state.set_state(Registration.manual_location)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_buildings_kb()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")


@router.message(Registration.auto_location, F.location)
async def process_auto_location(message: types.Message, state: FSMContext):
    user_location = message.location
    nearest = find_nearest_building(
        user_location.latitude,
        user_location.longitude
    )

    await state.update_data(
        building=nearest,
        latitude=user_location.latitude,
        longitude=user_location.longitude
    )

    await state.set_state(Registration.confirm_location)
    await message.answer(
        f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ –∑–¥–∞–Ω–∏–µ: {nearest}\n\n–≠—Ç–æ –≤–µ—Ä–Ω–æ?",
        reply_markup=get_confirm_location_kb()
    )


@router.message(Registration.auto_location, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞")
async def back_to_method(message: types.Message, state: FSMContext):
    await state.set_state(Registration.location_method)
    await message.answer(
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
        reply_markup=get_location_method_kb()
    )


@router.message(Registration.confirm_location)
async def process_confirm_location(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –î–∞, –≤–µ—Ä–Ω–æ":
        await save_data(message, state)
    elif message.text == "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞":
        await state.set_state(Registration.auto_location)
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=get_location_request_kb()
        )
    elif message.text == "üó∫Ô∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é":
        await state.set_state(Registration.manual_location)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_buildings_kb()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:")


@router.message(Registration.manual_location)
async def process_manual_location(message: types.Message, state: FSMContext):
    if message.text not in BUILDINGS:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return

    coords = BUILDINGS[message.text]
    await state.update_data(
        building=message.text,
        latitude=coords['lat'],
        longitude=coords['lon']
    )
    await save_data(message, state)


async def save_data(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_data = (
        message.from_user.id,
        data['full_name'],
        data['institute'],
        data['speciality'],
        data['building'],
        data['latitude'],
        data['longitude']
    )

    db = Database()
    db.add_user(user_data)
    await state.clear()

    await message.answer(
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n{format_profile(user_data)}",
        reply_markup=get_main_menu_kb()
    )