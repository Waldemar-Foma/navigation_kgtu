from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from utils.constants import DIRECTIONS, GROUPS
from config import REGISTRATION_CHOICE, REGISTER_GROUP, REGISTER_AGE, REGISTER_DIRECTION, REGISTER_NAME, MAIN_MENU
from keyboards import directions_keyboard, groups_keyboard, main_menu_keyboard


db = Database()

async def registration_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    user = update.message.from_user
    
    if choice == "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è":
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        return REGISTER_NAME
    else:
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n"
            "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def register_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    full_name = update.message.text.strip()
    
    if len(full_name.split()) < 2:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        return REGISTER_NAME
    
    context.user_data['full_name'] = full_name
    
    await update.message.reply_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:",
        reply_markup=groups_keyboard()
    )
    return REGISTER_GROUP

async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    group = update.message.text
    
    if group == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):"
        )
        return REGISTER_NAME
    
    if group not in GROUPS:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=groups_keyboard()
        )
        return REGISTER_GROUP
    
    context.user_data['group'] = group
    
    await update.message.reply_text("üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return REGISTER_AGE

async def register_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if age < 16 or age > 60:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return REGISTER_AGE
        context.user_data['age'] = age
        
        await update.message.reply_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=directions_keyboard()
        )
        return REGISTER_DIRECTION
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return REGISTER_AGE

async def register_direction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    direction = update.message.text
    user = update.message.from_user
    
    if direction == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("üéÇ –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
        return REGISTER_AGE
    
    if direction not in DIRECTIONS:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=directions_keyboard()
        )
        return REGISTER_DIRECTION
    
    full_name_parts = context.user_data['full_name'].split()
    first_name = full_name_parts[1] if len(full_name_parts) > 1 else ""
    last_name = full_name_parts[0] if len(full_name_parts) > 0 else ""
    patronymic = full_name_parts[2] if len(full_name_parts) > 2 else ""
    
    db.update_user_info(
        user.id,
        first_name=first_name,
        last_name=last_name,
        patronymic=patronymic,
        group_name=context.user_data['group'],
        age=context.user_data['age'],
        direction=direction
    )
    
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU