from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from utils.distance import find_nearest_building
from utils.constants import BUILDINGS
from config import CONFIRMING_BUILDING, MAIN_MENU, REGISTRATION_CHOICE, ASKING_LOCATION, MANUAL_BUILDING_SELECTION, WAITING_LOCATION
from keyboards import main_menu_keyboard


db = Database()

async def handle_manual_building_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text
    user = update.message.from_user

    if user_response == "üè¢ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é":
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [[building] for building in BUILDINGS.keys()] + [["üîô –ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
        )
        return MANUAL_BUILDING_SELECTION
    elif user_response == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:",
            reply_markup=ReplyKeyboardMarkup(
                [[{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ASKING_LOCATION
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}],
                    ["üè¢ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é"]
                ],
                resize_keyboard=True
            )
        )
        return WAITING_LOCATION

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    location = update.message.location

    nearest_building, distance = find_nearest_building(
        location.latitude, location.longitude, BUILDINGS
    )
    context.user_data['nearest_building'] = nearest_building
    context.user_data['user_location'] = (location.latitude, location.longitude)

    await update.message.reply_text(
        f"üìç –ë–ª–∏–∂–∞–π—à–∏–π –∫–æ—Ä–ø—É—Å: <b>{nearest_building}</b>\n"
        f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.0f} –º–µ—Ç—Ä–æ–≤\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–º –∫–æ—Ä–ø—É—Å–µ?",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"], ["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"]],
            resize_keyboard=True
        )
    )
    return CONFIRMING_BUILDING


async def confirm_building(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text
    user = update.message.from_user

    if user_response == "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é":
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –Ω–æ–≤—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:",
            reply_markup=ReplyKeyboardMarkup(
                [[{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}]],
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ASKING_LOCATION

    if user_response == "‚úÖ –î–∞":
        building = context.user_data.get('nearest_building')
        if building:
            db.update_user_info(user.id, current_building=building)

            if db.is_user_registered(user.id):
                await update.message.reply_text(
                    f"üè¢ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤ –∫–æ—Ä–ø—É—Å–µ: <b>{building}</b>\n\n"
                    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                    parse_mode='HTML',
                    reply_markup=main_menu_keyboard()
                )
                return MAIN_MENU
            else:
                await update.message.reply_text(
                    "üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                    "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ–π—á–∞—Å?",
                    reply_markup=ReplyKeyboardMarkup(
                        [["‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "‚è∞ –ü–æ–∑–∂–µ"]],
                        resize_keyboard=True
                    )
                )
                return REGISTRATION_CHOICE

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(
            [[building] for building in BUILDINGS.keys()] + [["üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"]],
            resize_keyboard=True
        )
    )
    return CONFIRMING_BUILDING


async def handle_manual_building_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    selected_building = update.message.text

    if selected_building == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            "üìç –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫–æ—Ä–ø—É—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é "
            "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é:",
            reply_markup=ReplyKeyboardMarkup(
                [
                    [{"text": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", "request_location": True}],
                    ["üè¢ –í—ã–±—Ä–∞—Ç—å –∫–æ—Ä–ø—É—Å –≤—Ä—É—á–Ω—É—é"]
                ],
                resize_keyboard=True
            )
        )
        return WAITING_LOCATION

    if selected_building in BUILDINGS:
        db.update_user_info(user.id, current_building=selected_building)

        if db.is_user_registered(user.id):
            await update.message.reply_text(
                f"üè¢ –ö–æ—Ä–ø—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{selected_building}</b>\n\n"
                "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                parse_mode='HTML',
                reply_markup=main_menu_keyboard()
            )
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "üìù –î–∞–≤–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
                "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ–π—á–∞—Å?",
                reply_markup=ReplyKeyboardMarkup(
                    [["‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "‚è∞ –ü–æ–∑–∂–µ"]],
                    resize_keyboard=True
                )
            )
            return REGISTRATION_CHOICE

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            [[building] for building in BUILDINGS.keys()] + [["üîô –ù–∞–∑–∞–¥"]],
            resize_keyboard=True
        )
    )
    return MANUAL_BUILDING_SELECTION
