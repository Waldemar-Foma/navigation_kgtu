from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import Database
from utils.constants import DIRECTIONS, GROUPS
from config import SETTINGS, MAIN_MENU
from keyboards import settings_keyboard, directions_keyboard, groups_keyboard, main_menu_keyboard


db = Database()

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user
    
    if text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=groups_keyboard()
        )
        context.user_data['setting'] = 'group'
        return SETTINGS
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
            reply_markup=directions_keyboard()
        )
        context.user_data['setting'] = 'direction'
        return SETTINGS
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        context.user_data['setting'] = 'age'
        return SETTINGS
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
        context.user_data['setting'] = 'name'
        return SETTINGS
    elif text == "üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ":
        user_info = db.get_user_info(user.id)
        if user_info:
            full_name = f"{user_info[3] or ''} {user_info[2] or ''} {user_info[4] or ''}".strip()
            
            await update.message.reply_text(
                f"üìä <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
                f"üë§ –§–ò–û: {full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üìö –ì—Ä—É–ø–ø–∞: {user_info[5] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_info[6] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {user_info[7] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üè¢ –¢–µ–∫—É—â–∏–π –∫–æ—Ä–ø—É—Å: {user_info[8] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info[9].split()[0] if user_info[9] else '–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}\n\n"
                f"üîó Username: @{user_info[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}",
                parse_mode='HTML',
                reply_markup=settings_keyboard()
            )
        return SETTINGS
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        setting = context.user_data.get('setting')
        if setting == 'group':
            if text in GROUPS:
                db.update_user_info(user.id, group_name=text)
                await update.message.reply_text(
                    "‚úÖ –ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                    reply_markup=settings_keyboard()
                )
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=groups_keyboard()
                )
                return SETTINGS
        elif setting == 'age':
            try:
                age = int(text)
                db.update_user_info(user.id, age=age)
                await update.message.reply_text(
                    "‚úÖ –í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    reply_markup=settings_keyboard()
                )
            except ValueError:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
                return SETTINGS
        elif setting == 'direction':
            if text in DIRECTIONS:
                db.update_user_info(user.id, direction=text)
                await update.message.reply_text(
                    "‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                    reply_markup=settings_keyboard()
                )
            else:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                    reply_markup=directions_keyboard()
                )
                return SETTINGS
        elif setting == 'name':
            full_name = text.strip()
            if len(full_name.split()) < 2:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á):")
                return SETTINGS
            
            name_parts = full_name.split()
            first_name = name_parts[1] if len(name_parts) > 1 else ""
            last_name = name_parts[0] if len(name_parts) > 0 else ""
            patronymic = name_parts[2] if len(name_parts) > 2 else ""
            
            db.update_user_info(
                user.id,
                first_name=first_name,
                last_name=last_name,
                patronymic=patronymic
            )
            await update.message.reply_text(
                "‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=settings_keyboard()
            )
        
        context.user_data.pop('setting', None)
        return SETTINGS
